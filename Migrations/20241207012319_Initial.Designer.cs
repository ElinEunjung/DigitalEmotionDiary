// <auto-generated />
using System;
using DigitalEmotionDiary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalEmotionDiary.Migrations
{
    [DbContext(typeof(DigitalEmotionDiaryDbContext))]
    [Migration("20241207012319_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("DigitalEmotionDiary.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("DiaryEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiaryEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.DiaryEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("EmotionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmotionId1")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmotionId1");

                    b.HasIndex("UserId");

                    b.ToTable("DiaryEntry");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Emotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmotionTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmotionTypeId");

                    b.ToTable("Emotion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundColor = "Yellow",
                            EmotionTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            BackgroundColor = "Orange",
                            EmotionTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            BackgroundColor = "Beige",
                            EmotionTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            BackgroundColor = "Brown",
                            EmotionTypeId = 4
                        },
                        new
                        {
                            Id = 5,
                            BackgroundColor = "Light Red",
                            EmotionTypeId = 5
                        },
                        new
                        {
                            Id = 6,
                            BackgroundColor = "Grey/Black",
                            EmotionTypeId = 6
                        },
                        new
                        {
                            Id = 7,
                            BackgroundColor = "Red",
                            EmotionTypeId = 7
                        },
                        new
                        {
                            Id = 8,
                            BackgroundColor = "White",
                            EmotionTypeId = 8
                        });
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.EmotionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EmotionType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Happy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Energized"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tired"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Anxious"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Stressed"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sad"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Annoyed"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Neutral"
                        });
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.EntryTag", b =>
                {
                    b.Property<long>("DiaryEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiaryEntryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EntryTag");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("DiaryEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadeAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiaryEntryId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Like", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DiaryEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiaryEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Comment", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.DiaryEntry", "DiaryEntry")
                        .WithMany("Comments")
                        .HasForeignKey("DiaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEmotionDiary.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.DiaryEntry", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.Emotion", "Emotion")
                        .WithMany("DiaryEntries")
                        .HasForeignKey("EmotionId1");

                    b.HasOne("DigitalEmotionDiary.Models.User", "User")
                        .WithMany("DiaryEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Emotion", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.EmotionType", "EmotionType")
                        .WithMany("Emotions")
                        .HasForeignKey("EmotionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmotionType");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.EntryTag", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.DiaryEntry", "DiaryEntry")
                        .WithMany("EntryTags")
                        .HasForeignKey("DiaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEmotionDiary.Models.Tag", "Tag")
                        .WithMany("EntryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryEntry");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Image", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.DiaryEntry", "DiaryEntry")
                        .WithMany("Images")
                        .HasForeignKey("DiaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryEntry");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Like", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.DiaryEntry", "DiaryEntry")
                        .WithMany("Likes")
                        .HasForeignKey("DiaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEmotionDiary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.DiaryEntry", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EntryTags");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Emotion", b =>
                {
                    b.Navigation("DiaryEntries");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.EmotionType", b =>
                {
                    b.Navigation("Emotions");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Tag", b =>
                {
                    b.Navigation("EntryTags");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DiaryEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
