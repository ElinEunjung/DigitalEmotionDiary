// <auto-generated />
using System;
using DigitalEmotionDiary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalEmotionDiary.Migrations
{
    [DbContext(typeof(DigitalEmotionDiaryDbContext))]
    partial class DigitalEmotionDiaryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("DigitalEmotionDiary.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("DiaryEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiaryEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.DiaryEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Emotion")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmotionType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DiaryEntry");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Emotion", b =>
                {
                    b.Property<int>("CurrentEmotion")
                        .HasColumnType("INTEGER");

                    b.ToTable("Emotion");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.EntryTag", b =>
                {
                    b.Property<long>("DiaryEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiaryEntryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EntryTag");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("DiaryEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadeAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiaryEntryId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Like", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DiaryEntryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiaryEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Comment", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.DiaryEntry", "DiaryEntry")
                        .WithMany("Comments")
                        .HasForeignKey("DiaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEmotionDiary.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.DiaryEntry", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.User", "User")
                        .WithMany("DiaryEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.EntryTag", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.DiaryEntry", "DiaryEntry")
                        .WithMany("EntryTags")
                        .HasForeignKey("DiaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEmotionDiary.Models.Tag", "Tag")
                        .WithMany("EntryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryEntry");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Image", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.DiaryEntry", "DiaryEntry")
                        .WithMany("Images")
                        .HasForeignKey("DiaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryEntry");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Like", b =>
                {
                    b.HasOne("DigitalEmotionDiary.Models.DiaryEntry", "DiaryEntry")
                        .WithMany("Likes")
                        .HasForeignKey("DiaryEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalEmotionDiary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.DiaryEntry", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EntryTags");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.Tag", b =>
                {
                    b.Navigation("EntryTags");
                });

            modelBuilder.Entity("DigitalEmotionDiary.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DiaryEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
